LAPLACIAN EDGE DETECTION

# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 18:21:53 2024

@author: shwet
"""

import cv2

def laplacian_edge_detection(image_path):
    # Read the image
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Apply Laplacian edge detection
    laplacian_edge = cv2.Laplacian(image, cv2.CV_64F)
    
    # Apply thresholding to highlight edges
    threshold_value = 30
    _, laplacian_edge_thresholded = cv2.threshold(laplacian_edge, threshold_value, 255, cv2.THRESH_BINARY)

    return laplacian_edge_thresholded

# Example usage
image_path = "img.png"
laplacian_edges = laplacian_edge_detection(image_path)

# Display the result
cv2.imshow("Laplacian Edges", laplacian_edges)
cv2.waitKey(0)
cv2.destroyAllWindows()

###########################################################
GAUSSIAN EDGE DETECTION

# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 18:23:27 2024

@author: shwet
"""

import cv2

def log_edge_detection(image_path):
    # Read the image
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Apply Gaussian blur
    blurred_image = cv2.GaussianBlur(image, (3, 3), 0)

    # Apply Laplacian of Gaussian (LoG)
    log_edge = cv2.Laplacian(blurred_image, cv2.CV_64F)
    
    # Apply thresholding to highlight edges
    threshold_value = 20
    _, log_edge_thresholded = cv2.threshold(log_edge, threshold_value, 255, cv2.THRESH_BINARY)

    return log_edge

# Example usage
image_path = "img.png"
log_edges = log_edge_detection(image_path)

# Display the result
cv2.imshow("Laplacian of Gaussian Edges", log_edges)
cv2.waitKey(0)
cv2.destroyAllWindows()


########################################################3

SOBEL EDGE DETECTION



import cv2

def sobel_edge_detection(image_path):
    # Read the image
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Apply Sobel edge detection
    sobel_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
    sobel_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)
    sobel_edge = cv2.magnitude(sobel_x, sobel_y)

    # Apply threshold to highlight edges
    threshold_value = 50
    _, sobel_edge_thresholded = cv2.threshold(sobel_edge, threshold_value, 255, cv2.THRESH_BINARY)

    return sobel_edge_thresholded

# Example usage
image_path = "img.png"
sobel_edges = sobel_edge_detection(image_path)

# Display the result
cv2.imshow("Sobel Edges", sobel_edges)
cv2.waitKey(0)
cv2.destroyAllWindows()

#####################################################


SHARPEN IMAGE

import cv2
import numpy as np

def sharpen_image(image):
    # Convert image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply Laplacian operator
    laplacian = cv2.Laplacian(gray_image, cv2.CV_64F)

    # Convert Laplacian to 3-channel image
    laplacian_3channels = cv2.merge([laplacian, laplacian, laplacian])

    # Adding Laplacian to original image to sharpen it
    sharpened_image = np.uint8(np.clip(image + laplacian_3channels, 0, 255))

    return sharpened_image

# Example usage
image = cv2.imread("img.png")
sharpened_image = sharpen_image(image)
cv2.imshow("Sharpened Image", sharpened_image)
cv2.waitKey(0)
cv2.destroyAllWindows()


############################################################3

SAMPLING


#image sampling 
# Import cv2, matplotlib, numpy 
import cv2 
import matplotlib.pyplot as plt 
import numpy as np 


# Read the original image and know its type 
img1 = cv2.imread('img.png', 0) 

# Obtain the size of the original image 
[m, n] = img1.shape 
print('Image Shape:', m, n) 

# Show original image 
print('Original Image:') 
plt.imshow(img1, cmap="gray") 


# Down sampling 

# Assign a down sampling rate 
# Here we are down sampling the 
# image by 4 
f = 2

# Create a matrix of all zeros for 
# downsampled values 
img2 = np.zeros((m//f, n//f), dtype=np.int) 

# Assign the down sampled values from the original 
# image according to the down sampling frequency. 
# For example, if the down sampling rate f=2, take 
# pixel values from alternate rows and columns 
# and assign them in the matrix created above 
for i in range(0, m, f): 
	for j in range(0, n, f): 
		try: 

			img2[i//f][j//f] = img1[i][j] 
		except IndexError: 
			pass


# Show down sampled image 
print('Down Sampled Image:') 
plt.imshow(img2, cmap="gray") 


# Up sampling 

# Create matrix of zeros to store the upsampled image 
img3 = np.zeros((m, n), dtype=np.int) 
# new size 
for i in range(0, m-1, f): 
	for j in range(0, n-1, f): 
		img3[i, j] = img2[i//f][j//f] 

# Nearest neighbour interpolation-Replication 
# Replicating rows 

for i in range(1, m-(f-1), f): 
	for j in range(0, n-(f-1)): 
		img3[i:i+(f-1), j] = img3[i-1, j] 

# Replicating columns 
for i in range(0, m-1): 
	for j in range(1, n-1, f): 
		img3[i, j:j+(f-1)] = img3[i, j-1] 

# Plot the up sampled image 
print('Up Sampled Image:') 
plt.imshow(img3, cmap="gray") 
###########################################################


PREWITT EDGE DETECTION

import cv2

def prewitt_edge_detection(image_path):
    # Read the image
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Apply Prewitt edge detection
    kernel_x = cv2.getDerivKernels(1, 0, 3, normalize=True)
    kernel_y = cv2.getDerivKernels(0, 1, 3, normalize=True)
    prewitt_x = cv2.filter2D(image, cv2.CV_64F, kernel_x[0] * kernel_x[1].T)
    prewitt_y = cv2.filter2D(image, cv2.CV_64F, kernel_y[0] * kernel_y[1].T)
    prewitt_edge = cv2.magnitude(prewitt_x, prewitt_y)
    
    # Apply threshold to highlight edges
    threshold_value = 20
    _, prewitt_edge_thresholded = cv2.threshold(prewitt_edge, threshold_value, 255, cv2.THRESH_BINARY)

    return prewitt_edge_thresholded

# Example usage
image_path = "img.png"
prewitt_edges = prewitt_edge_detection(image_path)

# Display the result
cv2.imshow("Prewitt Edges", prewitt_edges)
cv2.waitKey(0)
cv2.destroyAllWindows()
###############################################################


#RGB TO GRAY SCALE
import cv2
from google.colab.patches import cv2_imshow
image = cv2.imread("/content/drive/MyDrive/SEM 6/CG LAB/image processing/image.jpeg")

gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
cv2_imshow(gray)

#######################################################

CANNY EDGE DETECTION

import numpy as np
import cv2 as cv
from matplotlib import pyplot as plt
 
img = cv.imread('/content/drive/MyDrive/SEM 6/CG LAB/image processing/image.jpeg')
edges = cv.Canny(img,100,200)
 
plt.subplot(121),plt.imshow(img,cmap = 'brg')
plt.title('Original Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(edges,cmap = 'brg')
plt.title('Edge Image'), plt.xticks([]), plt.yticks([])
 
plt.show()

########################################################

HISTOGRAM PLOT

import numpy as np
import cv2 as cv
from matplotlib import pyplot as plt
 
img = cv.imread('/content/drive/MyDrive/SEM 6/CG LAB/image processing/image.jpeg', cv.IMREAD_GRAYSCALE)
 
hist,bins = np.histogram(img.flatten(),256,[0,256])
 
cdf = hist.cumsum()
cdf_normalized = cdf * float(hist.max()) / cdf.max()
 
plt.plot(cdf_normalized, color = 'b')
plt.hist(img.flatten(),256,[0,256], color = 'r')
plt.xlim([0,256])
plt.legend(('cdf','histogram'), loc = 'upper left')
plt.show()

#####################################################

HISTOGRAM EQUALIZATION

from google.colab.patches import cv2_imshow
img = cv.imread('/content/drive/MyDrive/SEM 6/CG LAB/image processing/image.jpeg', cv.IMREAD_GRAYSCALE)

equ = cv.equalizeHist(img)
res = np.hstack((img,equ)) #stacking images side-by-side
cv2_imshow(equ)



########################################################################
#########################################################################


# SAMPLING AND QUANTIZATION

import cv2 as cv
import numpy as np

flags = [i for i in dir(cv) if i.startswith('COLOR_')]
#print(flags)

inputImg = cv.imread("scenery.jpg")

'''
# display the image as such
cv.imshow('Input Image', inputImg)
cv.waitKey(0)
'''

'''
# display the image after converting to gray
grayImg = cv.cvtColor(inputImg, cv.COLOR_RGB2GRAY)
cv.imshow("Gray Image", grayImg)
cv.waitKey(0)
'''

'''
# resize an image
resizeImg = cv.resize(inputImg, (200, 200))
cv.imshow("Resized Image", resizeImg)
cv.waitKey(0)
cv.imwrite("Resized_Image.jpg", resizeImg)
'''

# convert to HSV and extract specific color images
hsv = cv.cvtColor(inputImg, cv.COLOR_BGR2HSV)

# to extract green
green = np.uint8([[[0, 255, 0]]])
hsvGreen = cv.cvtColor(green, cv.COLOR_BGR2HSV)

hueGreen = hsvGreen[0][0][0]
lowerGreen = np.array([hueGreen - 10, 100, 100])
upperGreen = np.array([hueGreen + 10, 255, 255]) 

maskGreen = cv.inRange(hsv, lowerGreen, upperGreen)

# to extract blue
blue = np.uint8([[[255, 0, 0]]])
hsvBlue = cv.cvtColor(blue, cv.COLOR_BGR2HSV)

hueBlue = hsvBlue[0][0][0]
lowerBlue = np.array([hueBlue - 10, 100, 100])
upperBlue = np.array([hueBlue + 10, 255, 255])

maskBlue = cv.inRange(hsv, lowerBlue, upperBlue)

mask = maskGreen + maskBlue

res = cv.bitwise_and(inputImg, inputImg, mask=mask)

cv.imshow("Masked", mask)
cv.waitKey(0)
cv.imshow("Green", res)
cv.waitKey(0)

################################################################
# HISTOGRAM EQUALIZATION

import cv2
import numpy as np
import random   
import matplotlib.pyplot as plt

image = cv2.imread('b_w.jpg', cv2.COLOR_BGR2GRAY)

histogram = cv2.calcHist(image, [0], None, [256], [0, 256])

plt.xlabel("pixel value")
plt.ylabel("count")
plt.plot(histogram)
plt.legend()
plt.show()

eq_histogram_image = cv2.equalizeHist(image)
eq_histogram = cv2.calcHist(eq_histogram_image, [0], None, [256], [0, 256])


plt.xlabel("pixel value")
plt.ylabel("count")
plt.plot(eq_histogram)
plt.legend()
plt.show()

cv2.imshow("original", image)
cv2.waitKey(0)

cv2.imshow("Equalized", eq_histogram_image)
cv2.waitKey(0)

cv2.destroyAllWindows()

# HISTOGRAM MATCHING

import cv2
import numpy as np

def histogram_matching(source, reference):
    # Calculate the histograms.
    src_hist, bins = np.histogram(source.flatten(), 256, [0,256])
    ref_hist, bins = np.histogram(reference.flatten(), 256, [0,256])

    # Calculate the cumulative distribution function for both histograms.
    src_cdf = np.cumsum(src_hist)
    src_cdf_normalized = src_cdf / float(src_cdf.max())
    ref_cdf = np.cumsum(ref_hist)
    ref_cdf_normalized = ref_cdf / float(ref_cdf.max())

    # Create a lookup table to map pixel values from the source to the reference.
    lookup_table = np.zeros(256)
    g_j = 0
    for g_i in range(256):
        while ref_cdf_normalized[g_j] < src_cdf_normalized[g_i] and g_j < 255:
            g_j += 1
        lookup_table[g_i] = g_j

    # Map the pixel values of the source image through the lookup table.
    matched_image = lookup_table[source.flatten()].reshape(source.shape).astype(np.uint8)

    return matched_image

# Load source and reference images
source_img = cv2.imread('scenery.jpg', cv2.IMREAD_GRAYSCALE)
reference_img = cv2.imread('b_w.jpg', cv2.IMREAD_GRAYSCALE)

# Apply histogram matching
matched_img = histogram_matching(source_img, reference_img)

# Display the result
cv2.imshow('Source Image', source_img)
cv2.imshow('Reference Image', reference_img)
cv2.imshow('Matched Image', matched_img)
cv2.waitKey(0)
cv2.destroyAllWindows()



# MAX FILTER

import cv2
import numpy as np

def max_filter(image, kernel_size):
    kernel = np.ones((kernel_size, kernel_size), np.uint8)
    return cv2.dilate(image, kernel)

# Example usage
image = cv2.imread("img.png")
kernel_size = 5  # Adjust kernel size as needed
max_filtered_image = max_filter(image, kernel_size)
cv2.imshow("Max Filtered Image", max_filtered_image)
cv2.waitKey(0)
cv2.destroyAllWindows()

# MEAN FILTER

import cv2

def mean_filter(image, kernel_size):
    return cv2.blur(image, (kernel_size, kernel_size))

# Example usage
image = cv2.imread("img.png")
kernel_size = 5  # Adjust kernel size as needed
mean_filtered_image = mean_filter(image, kernel_size)
cv2.imshow("Mean Filtered Image", mean_filtered_image)
cv2.waitKey(0)
cv2.destroyAllWindows()

# MEDIAN FILTER

import cv2

def median_filter(image, kernel_size):
    return cv2.medianBlur(image, kernel_size)

# Example usage
image = cv2.imread("img.png")
kernel_size = 5  # Adjust kernel size as needed
median_filtered_image = median_filter(image, kernel_size)
cv2.imshow("Median Filtered Image", median_filtered_image)
cv2.waitKey(0)
cv2.destroyAllWindows()

# MIN FILTER

import cv2
import numpy as np

def min_filter(image, kernel_size):
    kernel = np.ones((kernel_size, kernel_size), np.uint8)
    return cv2.erode(image, kernel)

# Example usage
image = cv2.imread("img.png")
kernel_size = 5  # Adjust kernel size as needed
min_filtered_image = min_filter(image, kernel_size)
cv2.imshow("Min Filtered Image", min_filtered_image)
cv2.waitKey(0)
cv2.destroyAllWindows()

##########################################################3
# LOG TRANSFORMATION

import cv2
import numpy as np

def log_transformation(image):
    # Normalizing the pixel values
    normalized_image = cv2.normalize(image, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)
    # Applying log transformation
    transformed_image = np.log1p(normalized_image)
    # Denormalizing the pixel values
    transformed_image = cv2.normalize(transformed_image, None, alpha=0, beta=255, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_8U)
    return transformed_image

# Example usage
image = cv2.imread("img.png", cv2.IMREAD_GRAYSCALE)
log_transformed_image = log_transformation(image)
cv2.imshow("Log Transformed Image", log_transformed_image)
cv2.waitKey(0)
cv2.destroyAllWindows()


####################################################################3

# Python program to draw smily face
import turtle

# turtle object
pen = turtle.Turtle()

# function for creation of eye
def eye(col, rad):
	pen.down()
	pen.fillcolor(col)
	pen.begin_fill()
	pen.circle(rad)
	pen.end_fill()
	pen.up()


# draw face
pen.fillcolor('yellow')
pen.begin_fill()
pen.circle(100)
pen.end_fill()
pen.up()

# draw eyes
pen.goto(-40, 120)
eye('white', 15)
pen.goto(-37, 125)
eye('black', 5)
pen.goto(40, 120)
eye('white', 15)
pen.goto(40, 125)
eye('black', 5)


# draw mouth
pen.goto(-40, 85)
pen.down()
pen.right(90)
pen.circle(40, 180)
pen.up()

##########################################################

# Python example program for image subtraction

from PIL import Image
import numpy as np

# Paths of two image frames
image1Path = "Images/TwoBottles.jpg"
image2Path = "Images/OneBottle.jpg"

# Open the images

image1 = Image.open(image1Path);
image2 = Image.open(image2Path);

# Get the image buffer as ndarray

buffer1 = np.asarray(image1);
buffer2 = np.asarray(image2);

# Subtract image2 from image1
buffer3 = buffer1 - buffer2;

# Construct a new Image from the resultant buffer

differenceImage = Image.fromarray(buffer3);

# Display all the images including the difference image

image1.show();
image2.show();

differenceImage.show();


##############################################################

THRESHOLDING

from PIL import Image


# Method to process the red band

def pixelProcRed(intensity):
    return 0


# Method to process the blue band

def pixelProcBlue(intensity):
    return intensity


# Method to process the green band

def pixelProcGreen(intensity):
    return 0


# Create an image object

imageObject = Image.open("Images/Garden.jpeg")

# Split the red, green and blue bands from the Image

multiBands = imageObject.split()

# Apply point operations that does thresholding on each color band

redBand = multiBands[0].point(pixelProcRed)

greenBand = multiBands[1].point(pixelProcGreen)

blueBand = multiBands[2].point(pixelProcBlue)

# Display the individual band after thresholding
redBand.show()
redBand.save('redBand.jpg')
greenBand.show()
greenBand.save('greenBand.jpg')
blueBand.show()
blueBand.save('blueBand.jpg')

# Create a new image from the thresholded red, green and blue brands

newImage = Image.merge("RGB", (redBand, greenBand, blueBand))

# Display the merged image after thresholding

newImage.show()
newImage.save('GardenThresholded.jpg')


