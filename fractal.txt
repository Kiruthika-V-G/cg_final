1.C-CURVE

from turtle import *
color('red', 'blue')
#begin_fill()
rule=['r','f','l','l','f','r']
prev=['r','f','l','l','f','r']
ans=[]
for iter in range(6):
    ans = []
    for i in prev:
        if(i=='f'):
            ans+=rule
        else:
            ans.append(i)
    prev = ans

print(ans)

for i in range(0,len(ans)):
    if(ans[i] == 'r'):
        right(45)
    elif(ans[i] == 'f'):
        forward(20)
    elif(ans[i] == 'l'):
        left(45)


#end_fill()
done()

"""or this works well also

import turtle

def c_curve(depth: int):
    
    start = "+f--f+"
    for i in range(depth):
        string = ""
        for j in range(len(start)):
            
            if start[j] == 'f':
                string += "+f--f+"
            else:
                string += start[j]
        start = string
        
    return start

def main():
    
    string = c_curve(depth=4)
    rules = {
            'f': [t.forward, 10],
            '+': [t.right, 45],
            '-': [t.left, 45],
        }
    
    for i in range(len(string)):
        rules.get(string[i])[0](rules.get(string[i])[1])        


t = turtle.Turtle()
main()
turtle.mainloop()
turtle.done()"""

# import turtle

# # C Curve function
# def c_curve(n):
#     if n == 0:
#         return ['F']
#     else:
#         prev = c_curve(n - 1)
#         return prev + ['L'] + [x if x == 'F' else 'R' for x in reversed(prev)]

# # Configure turtle
# screen = turtle.Screen()
# screen.title("C Curve")
# screen.bgcolor("white")

# t = turtle.Turtle()
# t.speed(0)
# t.penup()
# t.goto(-200, 0)
# t.pendown()

# # Parameters
# order = 4 # Adjust the order as needed
# size = 6

# # Generate C Curve
# curve = c_curve(order)
# for move in curve:
#     if move == 'F':
#         t.forward(size)
#     elif move == 'L':
#         t.left(90)
#     elif move == 'R':
#         t.right(90)

# # Hide turtle
# t.hideturtle()

# # Keep window open until it's closed by the user
# turtle.done()


###################################################################

2.DRAGON CURVE 1

import turtle

def dragon_curve(turtle, order, length, direction):
    if order == 0:
        turtle.forward(length)
    else:
        dragon_curve(turtle, order - 1, length, 1)
        turtle.right(90 * direction)
        dragon_curve(turtle, order - 1, length, -1)

turtle.speed(0)
dragon_curve(turtle, 12, 5, 1)
turtle.done()

"""or this works well also

import turtle

def dragon_curve(depth: int):

    start = "f-h"
    for i in range(depth):
        string = ""
        for j in range(len(start)):
            
            if start[j] == 'f':
                string += "f-h"
            elif start[j] == 'h':
                string += "f+h"
            else:
                string += start[j]
            
        start = string
        
    return start


def main():

    t.left(90)
    string = dragon_curve(depth=10)

    rules = {
            'f': [t.forward, 10],
            'h': [t.forward, 10],
            '+': [t.right, 90],
            '-': [t.left, 90],
        }
    
    for i in range(len(string)):
        rules.get(string[i])[0](rules.get(string[i])[1])        


t = turtle.Turtle()
main()
turtle.mainloop()
turtle.done()"""

# import turtle

# def dragon_curve(order, length, angle, turn):
#     if order == 0:
#         turtle.forward(length)
#         return
#     else:
#         dragon_curve(order - 1, length, angle, "right")
#         turtle.left(angle if turn == "right" else -angle)
#         dragon_curve(order - 1, length, angle, "left")

# # Configure turtle
# screen = turtle.Screen()
# screen.title("Dragon Curve")
# screen.bgcolor("white")

# t = turtle.Turtle()
# t.speed(0)
# t.penup()
# t.goto(-200, 0)
# t.pendown()

# # Parameters
# order = 4  # Adjust the order as needed
# length = 5
# angle = 90

# # Generate Dragon Curve
# dragon_curve(order, length, angle, "right")

# # Hide turtle
# t.hideturtle()

# # Keep window open until it's closed by the user
# turtle.done()


###############################################################

3. DRAGON CURVE 2

from turtle import *
color('red')
rule=['f','x']
prev=['f','x']
ans=[]
xVals = ['x','+','y','f','+']
yVals = ['-','f','x','-','y']

for iter in range(7):
    ans = []
    for i in prev:
        if(i=='x'):
            ans+=xVals
        elif(i=='y'):
            ans+=yVals
        else:
            ans.append(i)
    prev = ans

#print(ans)

for i in range(0,len(ans)):
    if(ans[i] == '+'):
        right(90)
    elif(ans[i] == '-'):
        left(90)
    elif(ans[i] == 'f'):
        forward(20)

done()

###########################################################

4.TERRAIN CURVE

import turtle
import random

# Set up the screen
screen = turtle.Screen()
screen.setup(width=800, height=600)
screen.bgcolor("skyblue")

# Set up the turtle
terrain_turtle = turtle.Turtle()
terrain_turtle.speed(0)  # Set the fastest drawing speed
terrain_turtle.penup()

# Function to draw terrain
def draw_terrain():
    terrain_turtle.goto(-400, -20)  # Starting point
    terrain_turtle.pendown()

    # Draw the terrain
    for _ in range(160):
        terrain_turtle.color("green")
        terrain_turtle.forward(5)  # Move forward
        terrain_turtle.setheading(random.choice([0, 45, -45]))  # Turn randomly
        terrain_turtle.forward(random.randint(1, 10))  # Move up or down randomly

# Call the function to draw terrain
draw_terrain()

# Hide the turtle
terrain_turtle.hideturtle()

# Keep the window open
screen.mainloop()


###############################################################################


5.MANDELBROT CURVE

import turtle
import math

def mandelbrot(z , c , n=20):
    if abs(z) > 10 ** 12:
        return float("nan")
    elif n > 0:
        return mandelbrot(z ** 2 + c, c, n - 1)
    else:
        return z ** 2 + c

# screen size (in pixels)
screenx, screeny = 800, 600

# complex plane limits
complexPlaneX, complexPlaneY = (-2.0, 2.0), (-1.0, 2.0)

# discretization step
step = 2

# turtle config
turtle.tracer(0, 0)
turtle.setup(screenx, screeny)

screen = turtle.Screen()
screen.bgcolor("red")
screen.title("Mandelbrot Fractal (discretization step = %d)" % (int(step)))
mTurtle = turtle.Turtle()
mTurtle.penup()
mTurtle.shape("square")

# px * pixelToX = x in complex plane coordinates
pixelToX, pixelToY = (complexPlaneX[1] - complexPlaneX[0])/screenx, (complexPlaneY[1] - complexPlaneY[0])/screeny

# plot
for px in range(-int(screenx/2), int(screenx/2), int(step)):
    for py in range(-int(screeny/2), int(screeny/2), int(step)):
        x, y = px * pixelToX, py * pixelToY
        m =  mandelbrot(0, x + 1j * y)
        if not math.isnan(m.real):
            color = [abs(math.sin(m.imag)) for i in range(3)]
            mTurtle.color(color)
            mTurtle.dot(2.4, color)
            mTurtle.goto(px, py)
    turtle.update()

turtle.mainloop()

########################################################################################

6.JULIA SET

import turtle
import math

def julia(z, c, n=20):
    if abs(z) > 10 ** 12:
        return float("nan")
    elif n > 0:
        return julia(z ** 2 + c, c, n - 1)
    else:
        return z ** 2 + c

# Screen size (in pixels)
screenx, screeny = 800, 600

# Complex plane limits
complexPlaneX, complexPlaneY = (-2.0, 2.0), (-2.0, 2.0)

# Discretization step
step = 2

# Turtle configuration
turtle.tracer(0, 0)
turtle.setup(screenx, screeny)

screen = turtle.Screen()
screen.bgcolor("black")
screen.title("Julia Fractal (discretization step = %d)" % (int(step)))
jTurtle = turtle.Turtle()
jTurtle.penup()
jTurtle.shape("square")

# px * pixelToX = x in complex plane coordinates
pixelToX, pixelToY = (complexPlaneX[1] - complexPlaneX[0]) / screenx, (complexPlaneY[1] - complexPlaneY[0]) / screeny

# Julia set constant (change as needed)
c = complex(-0.7, 0.27015)

# Plot
for px in range(-int(screenx/2), int(screenx/2), int(step)):
    for py in range(-int(screeny/2), int(screeny/2), int(step)):
        x, y = px * pixelToX, py * pixelToY
        m = julia(0, x + 1j * y + c)
        if not math.isnan(m.real):
            color = [abs(math.sin(m.imag)) for i in range(3)]
            jTurtle.color(color)
            jTurtle.dot(2.4, color)
            jTurtle.goto(px, py)
    turtle.update()

turtle.mainloop()


#########################################################################################

7.SNOWFLAKE 

# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 18:34:44 2024

@author: maana
"""

import turtle

def koch_snowflake(t,length,levels):
    if levels == 0:
        t.forward(length)
        return
    else:
        length = length/3

        koch_snowflake(t, length, levels-1)
        t.left(60)
        koch_snowflake(t, length, levels-1)

        t.right(120)
        koch_snowflake(t, length, levels-1)

        t.left(60)
        koch_snowflake(t, length, levels-1)





t = turtle.Turtle()
t.hideturtle()
t.color('black')

for i in range(3):
    koch_snowflake(t, 200, 4)
    t.right(120)


t.mainloop()

###########################################################
###########################################################

SANTHOSH CODE:

1.C-CURVE

import turtle
import random
n=int(input("number of iterations of the C curve (give less than 10 ):-"))
#try to give the iterations as even numbers to see symmetry
# powers of 2 are more prefereable
step=float(input("step length for forward propagation :- "))
#adjust this step value to increase the size of the curve
#note as you increase the number of intersections , decrease the forward step value
"""
L system used :- 
Variables:	F
Constants:	+ -
Start:	F
Rules:	F → +F--F+
where "F" means "draw forward", "+" means "turn clockwise 45°", and "-" means "turn anticlockwise 45°". 
    
"""
def generate_string(n):
    if n == 0:
        return "F"
    else:
        prev_string = generate_string(n-1)
        new_string = ""
        for char in prev_string:
            if char == "F":
                new_string += "+F--F+"
            else:
                new_string += char
        return new_string
draw_string=generate_string(n)
turtle.penup()
turtle.goto(0, 200)#starting pos of turtle to draw the curve
turtle.pendown()
turtle.speed(10000)#speed of drawing can be still increased
for i in draw_string:
    if i=='F':
        color = (random.random(), random.random(), random.random())  # Random RGB color
        turtle.color(color)
        turtle.forward(step)
    elif i=='+':
        turtle.right(45)
    elif i=='-':
        turtle.left(45)
turtle.done()
    
#################################################################################

2.DRAGON_CURVE

import turtle
import random
n=int(input("number of iterations of the dragon curve (give less than 10 ):-"))
#try to give the iterations as even numbers to see symmetry
# powers of 2 are more prefereable
step=float(input("step length for forward propagation :- "))
#adjust this step value to increase the size of the curve
#note as you increase the number of intersections , decrease the forward step value
"""
L system used :- 
variables : F G
constants : + -
start  : F
rules  : (F → F-G), (G → F+G)
angle  : 90°
Here, F and G both mean "draw forward", + means "turn right by angle", and - means "turn left by angle". 
"""
def generate_string(n):
    if n == 0:
        return "F"
    else:
        prev_string = generate_string(n-1)
        new_string = ""
        for char in prev_string:
            if char == "F":
                new_string += "F-G"
            elif char == "G":
                new_string += "F+G"
            else:
                new_string += char
        return new_string
draw_string=generate_string(n)
print(len(draw_string))
turtle.penup()
turtle.goto(0, 0)#starting pos of turtle to draw the curve
turtle.pendown()
turtle.speed(10000000000000)#speed of drawing can be still increased
for i in draw_string:
    if i=='F' or i=='G':
        color = (random.random(), random.random(), random.random())  # Random RGB color
        turtle.color(color)
        turtle.forward(step)
    elif i=='+':
        turtle.left(90)# - sign to denote anticlockwise direction
    elif i=='-':
        turtle.right(90)
turtle.done()
    
####################################################################################3

3.MANDLEBROT

import turtle
import math

def mandelbrot(z , c , n=20):
    if abs(z) > 10 ** 12:
        return float("nan")
    elif n > 0:
        return mandelbrot(z ** 2 + c, c, n - 1)
    else:
        return z ** 2 + c

# screen size (in pixels)
screenx, screeny = 800, 600
# complex plane limits
complexPlaneX, complexPlaneY = (-2.0, 2.0), (-2.0, 2.0)
# discretization step
step = 2

# turtle config
turtle.tracer(0, 0)
screen = turtle.Screen()
screen.title("Mandelbrot Fractal (discretization step = %d)" % (int(step)))

mTurtle = turtle.Turtle()
mTurtle.penup()

# px * pixelToX = x in complex plane coordinates
pixelToX, pixelToY = (complexPlaneX[1] - complexPlaneX[0])/screenx, (complexPlaneY[1] - complexPlaneY[0])/screeny
# plot
for px in range(-int(screenx/2), int(screenx/2), int(step)):
    for py in range(-int(screeny/2), int(screeny/2), int(step)):
        x, y = px * pixelToX, py * pixelToY
        m =  mandelbrot(0, x + 1j * y)
        if not math.isnan(m.real):
            r = int(abs(math.sin(m.imag)) * 255)
            g = int(abs(math.sin(m.imag + (2 * math.pi / 3))) * 255)
            b = int(abs(math.sin(m.imag + (4 * math.pi / 3))) * 255)
            color = (r, g, b)
            hex_color = "#{:02x}{:02x}{:02x}".format(color[0], color[1], color[2])
            mTurtle.color(hex_color)
            mTurtle.dot(2.4, hex_color)
            mTurtle.goto(px, py)
    turtle.update()

turtle.mainloop()

#################################################################################3

4.SIER TRIANGLE

import turtle
import random
n=int(input("number of iterations of the sier-triangle (give less than 10 ):-"))
#try to give the iterations as even numbers to see symmetry
# powers of 2 are more prefereable
step=float(input("step length for forward propagation :- "))
#adjust this step value to increase the size of the curve
#note as you increase the number of intersections , decrease the forward step value

"""
L system used :- 
variables : A B
constants : + -
start  : A
rules  : (A → B-A-B), (B → A+B+A)
angle  : 60°
Here, A and B both mean "draw forward", + means "turn left by angle", and - means "turn right by angle" 
"""
def generate_string(n):
    if n == 0:
        return "A"
    else:
        prev_string = generate_string(n-1)
        new_string = ""
        for char in prev_string:
            if char == "A":
                new_string += "B-A-B"
            elif char == "B":
                new_string += "A+B+A"
            else:
                new_string += char
        return new_string
draw_string=generate_string(n)
print(len(draw_string))
turtle.penup()
turtle.goto(-100, -100)#starting pos of turtle to draw the curve
turtle.pendown()
turtle.speed(1000000)#speed of drawing can be still increased
for i in draw_string:
    if i=='A' or i=='B':
        color = (random.random(), random.random(), random.random())  # Random RGB color
        turtle.color(color)
        turtle.forward(step)
    elif i=='+':
        turtle.left(60)
    elif i=='-':
        turtle.right(60)
turtle.done()
    
###################################################################################

5.TERRAIN

import turtle
import random
n=int(input("number of iterations of the terrain (give less than 10 ):-"))
#try to give the iterations as even numbers to see symmetry
# powers of 2 are more prefereable
step=float(input("step length for forward propagation :- "))
#adjust this step value to increase the size of the curve
#note as you increase the number of intersections , decrease the forward step value

"""
L system used :- 
variables : F
constants : + *
start  : F
rules  : (F -> F+F*F+F)
angle  : 60°,120°
Here, F means "draw forward", + means "turn left by angle" , and * means turn right by 120 deg
"""
def generate_string(n):
    if n == 0:
        return "F"
    else:
        prev_string = generate_string(n-1)
        new_string = ""
        for char in prev_string:
            if char == "F":
                new_string += "F+F*F+F"
            else:
                new_string += char
        return new_string
draw_string=generate_string(n)
print(len(draw_string))
turtle.penup()
turtle.goto(-150, -150)#starting pos of turtle to draw the curve
turtle.pendown()
turtle.speed(1000000)#speed of drawing can be still increased
for i in draw_string:
    if i=='F':
        color = (random.random(), random.random(), random.random())  # Random RGB color
        turtle.color(color)
        turtle.forward(step)
    elif i=='+':
        turtle.left(60)
    elif i=='*':
        turtle.right(120)
turtle.done()
    
