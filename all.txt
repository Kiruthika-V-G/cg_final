# SAMPLING

# Import cv2, matplotlib, numpy 
import cv2 
import matplotlib.pyplot as plt 
import numpy as np 


# Read the original image and know its type 
img1 = cv2.imread('CG FINAL\img.png', 0) 

# Obtain the size of the original image 
[m, n] = img1.shape 
print('Image Shape:', m, n) 

# Show original image 
print('Original Image:') 
plt.imshow(img1, cmap="gray") 


# Down sampling 

# Assign a down sampling rate 
# Here we are down sampling the 
# image by 4 
f = 2

# Create a matrix of all zeros for 
# downsampled values 
img2 = np.zeros((m//f, n//f), dtype=int) 

# Assign the down sampled values from the original 
# image according to the down sampling frequency. 
# For example, if the down sampling rate f=2, take 
# pixel values from alternate rows and columns 
# and assign them in the matrix created above 
for i in range(0, m, f): 
	for j in range(0, n, f): 
		try: 

			img2[i//f][j//f] = img1[i][j] 
		except IndexError: 
			pass


# Show down sampled image 
print('Down Sampled Image:') 
plt.imshow(img2, cmap="gray") 


# Up sampling 

# Create matrix of zeros to store the upsampled image 
img3 = np.zeros((m, n), dtype=np.int) 
# new size 
for i in range(0, m-1, f): 
	for j in range(0, n-1, f): 
		img3[i, j] = img2[i//f][j//f] 

# Nearest neighbour interpolation-Replication 
# Replicating rows 

for i in range(1, m-(f-1), f): 
	for j in range(0, n-(f-1)): 
		img3[i:i+(f-1), j] = img3[i-1, j] 

# Replicating columns 
for i in range(0, m-1): 
	for j in range(1, n-1, f): 
		img3[i, j:j+(f-1)] = img3[i, j-1] 

# Plot the up sampled image 
print('Up Sampled Image:') 
plt.imshow(img3, cmap="gray") 





# SHARPENING

import cv2
import numpy as np

def sharpen_image(image):
    # Convert image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply Laplacian operator
    laplacian = cv2.Laplacian(gray_image, cv2.CV_64F)

    # Convert Laplacian to 3-channel image
    laplacian_3channels = cv2.merge([laplacian, laplacian, laplacian])

    # Adding Laplacian to original image to sharpen it
    sharpened_image = np.uint8(np.clip(image + laplacian_3channels, 0, 255))

    return sharpened_image

# Example usage
image = cv2.imread("img.png")
sharpened_image = sharpen_image(image)
cv2.imshow("Sharpened Image", sharpened_image)
cv2.waitKey(0)
cv2.destroyAllWindows()





# CANNY EDGE DETECTION

# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 18:21:08 2024

@author: shwet
"""

import cv2

def canny_edge_detection(image_path):
    # Read the image
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Apply Canny edge detection
    canny_edge = cv2.Canny(image, 100, 200)  # Adjust threshold values as needed

    return canny_edge

# Example usage
image_path = "img.png"
canny_edges = canny_edge_detection(image_path)

# Display the result
cv2.imshow("Canny Edges", canny_edges)
cv2.waitKey(0)
cv2.destroyAllWindows()





# LAPLACIAN OF GAUSSIAN EDGE DETECTION

# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 18:23:27 2024

@author: shwet
"""

import cv2

def log_edge_detection(image_path):
    # Read the image
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Apply Gaussian blur
    blurred_image = cv2.GaussianBlur(image, (3, 3), 0)

    # Apply Laplacian of Gaussian (LoG)
    log_edge = cv2.Laplacian(blurred_image, cv2.CV_64F)
    
    # Apply thresholding to highlight edges
    threshold_value = 20
    _, log_edge_thresholded = cv2.threshold(log_edge, threshold_value, 255, cv2.THRESH_BINARY)

    return log_edge

# Example usage
image_path = "img.png"
log_edges = log_edge_detection(image_path)

# Display the result
cv2.imshow("Laplacian of Gaussian Edges", log_edges)
cv2.waitKey(0)
cv2.destroyAllWindows()





# PREWITT EDGE DETECTION

# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 18:18:25 2024

@author: shwet
"""

import cv2

def prewitt_edge_detection(image_path):
    # Read the image
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Apply Prewitt edge detection
    kernel_x = cv2.getDerivKernels(1, 0, 3, normalize=True)
    kernel_y = cv2.getDerivKernels(0, 1, 3, normalize=True)
    prewitt_x = cv2.filter2D(image, cv2.CV_64F, kernel_x[0] * kernel_x[1].T)
    prewitt_y = cv2.filter2D(image, cv2.CV_64F, kernel_y[0] * kernel_y[1].T)
    prewitt_edge = cv2.magnitude(prewitt_x, prewitt_y)
    
    # Apply threshold to highlight edges
    threshold_value = 20
    _, prewitt_edge_thresholded = cv2.threshold(prewitt_edge, threshold_value, 255, cv2.THRESH_BINARY)

    return prewitt_edge_thresholded

# Example usage
image_path = "img.png"
prewitt_edges = prewitt_edge_detection(image_path)

# Display the result
cv2.imshow("Prewitt Edges", prewitt_edges)
cv2.waitKey(0)
cv2.destroyAllWindows()





# SOBEL EDGE DETECTION

# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 18:13:13 2024

@author: shwet
"""


import cv2

def sobel_edge_detection(image_path):
    # Read the image
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Apply Sobel edge detection
    sobel_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
    sobel_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)
    sobel_edge = cv2.magnitude(sobel_x, sobel_y)

    # Apply threshold to highlight edges
    threshold_value = 50
    _, sobel_edge_thresholded = cv2.threshold(sobel_edge, threshold_value, 255, cv2.THRESH_BINARY)

    return sobel_edge_thresholded

# Example usage
image_path = "img.png"
sobel_edges = sobel_edge_detection(image_path)

# Display the result
cv2.imshow("Sobel Edges", sobel_edges)
cv2.waitKey(0)
cv2.destroyAllWindows()





# LAPLACIAN FILTER EDGE DETECTION

# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 18:21:53 2024

@author: shwet
"""

import cv2

def laplacian_edge_detection(image_path):
    # Read the image
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Apply Laplacian edge detection
    laplacian_edge = cv2.Laplacian(image, cv2.CV_64F)
    
    # Apply thresholding to highlight edges
    threshold_value = 30
    _, laplacian_edge_thresholded = cv2.threshold(laplacian_edge, threshold_value, 255, cv2.THRESH_BINARY)

    return laplacian_edge_thresholded

# Example usage
image_path = "img.png"
laplacian_edges = laplacian_edge_detection(image_path)

# Display the result
cv2.imshow("Laplacian Edges", laplacian_edges)
cv2.waitKey(0)
cv2.destroyAllWindows()





# HISTOGRAM EQUALIZATION

# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 18:30:09 2024

@author: shwet
"""

import cv2
import matplotlib.pyplot as plt

img = cv2.imread('img.png',cv2.IMREAD_GRAYSCALE)
hist1 = cv2.calcHist([img],[0],None,[256],[0,256])
img_2 = cv2.equalizeHist(img)
hist2 = cv2.calcHist([img_2],[0],None,[256],[0,256])
plt.subplot(221),plt.imshow(img);
plt.subplot(222),plt.plot(hist1);
plt.subplot(223),plt.imshow(img_2);
plt.subplot(224),plt.plot(hist2);





# HISTOGRAM MATCHING

import cv2
import numpy as np
import matplotlib.pyplot as plt

def histogram_matching(image, reference_histogram):
    # Compute the histogram of the input image
    image_histogram = cv2.calcHist([image], [0], None, [256], [0, 256])

    # Compute the cumulative distribution function (CDF) of the input image histogram
    image_cdf = image_histogram.cumsum() / image_histogram.sum()

    # Compute the cumulative distribution function (CDF) of the reference histogram
    reference_cdf = reference_histogram.cumsum() / reference_histogram.sum()

    # Perform histogram matching
    matched_image = np.interp(image.flatten(), np.arange(256), np.uint8(255 * reference_cdf)).reshape(image.shape)

    # Convert the matched image to 8-bit unsigned integer
    matched_image = np.uint8(matched_image)

    # Compute the histogram of the matched image
    matched_histogram = cv2.calcHist([matched_image], [0], None, [256], [0, 256])

    return matched_image, matched_histogram

# Example usage
# Load the input image
input_image = cv2.imread("img.png", cv2.IMREAD_GRAYSCALE)

# Load the reference image (or compute its histogram)
reference_image = cv2.imread("img2.jpg", cv2.IMREAD_GRAYSCALE)
reference_histogram = cv2.calcHist([reference_image], [0], None, [256], [0, 256])

# Perform histogram matching
matched_image, matched_histogram = histogram_matching(input_image, reference_histogram)

# Display the result
plt.figure(figsize=(10, 6))

plt.subplot(2, 3, 1)
plt.imshow(input_image, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(2, 3, 2)
plt.imshow(reference_image, cmap='gray')
plt.title('Reference Image')
plt.axis('off')

plt.subplot(2, 3, 3)
plt.imshow(matched_image, cmap='gray')
plt.title('Matched Image')
plt.axis('off')

plt.subplot(2, 3, 4)
plt.plot(reference_histogram, color='blue')
plt.title('Reference Histogram')
plt.xlabel('Intensity')
plt.ylabel('Frequency')

plt.subplot(2, 3, 5)
plt.plot(cv2.calcHist([input_image], [0], None, [256], [0, 256]), color='green')
plt.title('Input Histogram')
plt.xlabel('Intensity')
plt.ylabel('Frequency')

plt.subplot(2, 3, 6)
plt.plot(matched_histogram, color='red')
plt.title('Matched Histogram')
plt.xlabel('Intensity')
plt.ylabel('Frequency')

plt.tight_layout()
plt.show()





# MAX FILTER

# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 18:47:02 2024

@author: shwet
"""

import cv2
import numpy as np

def max_filter(image, kernel_size):
    kernel = np.ones((kernel_size, kernel_size), np.uint8)
    return cv2.dilate(image, kernel)

# Example usage
image = cv2.imread("img.png")
kernel_size = 5  # Adjust kernel size as needed
max_filtered_image = max_filter(image, kernel_size)
cv2.imshow("Max Filtered Image", max_filtered_image)
cv2.waitKey(0)
cv2.destroyAllWindows()





# MIN FILTER

# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 18:47:51 2024

@author: shwet
"""

import cv2
import numpy as np

def min_filter(image, kernel_size):
    kernel = np.ones((kernel_size, kernel_size), np.uint8)
    return cv2.erode(image, kernel)

# Example usage
image = cv2.imread("img.png")
kernel_size = 5  # Adjust kernel size as needed
min_filtered_image = min_filter(image, kernel_size)
cv2.imshow("Min Filtered Image", min_filtered_image)
cv2.waitKey(0)
cv2.destroyAllWindows()





# MEAN FILTER

# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 18:45:47 2024

@author: shwet
"""

import cv2

def mean_filter(image, kernel_size):
    return cv2.blur(image, (kernel_size, kernel_size))

# Example usage
image = cv2.imread("img.png")
kernel_size = 5  # Adjust kernel size as needed
mean_filtered_image = mean_filter(image, kernel_size)
cv2.imshow("Mean Filtered Image", mean_filtered_image)
cv2.waitKey(0)
cv2.destroyAllWindows()





# MEDIAN FILTER

# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 18:46:29 2024

@author: shwet
"""

import cv2

def median_filter(image, kernel_size):
    return cv2.medianBlur(image, kernel_size)

# Example usage
image = cv2.imread("img.png")
kernel_size = 5  # Adjust kernel size as needed
median_filtered_image = median_filter(image, kernel_size)
cv2.imshow("Median Filtered Image", median_filtered_image)
cv2.waitKey(0)
cv2.destroyAllWindows()





# PROJECTION

#include <GL/glut.h>
#include <stdlib.h>
#include <iostream>
using namespace std;
GLfloat ex = 0.0, ey = 0.0, ez = -3.0;
void init()
{
        glEnable(GL_DEPTH_TEST); // as 3D
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();

        glFrustum(-4.0, 4.0, -4.0, 4.0, 1.0, 10.0); // min, max - x, y, z
        //glOrtho(-4.0, 4.0, -4.0,  4.0, 1.0, 10.0);
        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();

        gluLookAt(ex, ey, ez,  0.0, 0.0, 0.0, 0.0, 1.0, 0.0); // 1st 3 => eye pt, 2nd 3 => positn of obj looking at by eye, 3rd 3 => cam upw/downw (generally 0, 1, 0)
}
GLfloat vertices[8][3]={ // def cube, specifying coords from -2 to 2
    {-1.0, -1.0, 1.0},     {-1.0, 1.0, 1.0},    {1.0, 1.0, 1.0},
    {1.0, -1.0, 1.0},    {-1.0, -1.0, -1.0},     {-1.0, 1.0, -1.0},
    {1.0, 1.0, -1.0},    {1.0, -1.0, -1.0}
};

GLfloat colors[8][3]={
    {0.0, 0.0, 0.0},{1.0, 0.0, 0.0},
    {1.0, 1.0, 0.0},{0.0, 1.0, 0.0},
    {0.0, 0.0, 1.0},{1.0, 0.0, 1.0},
    {1.0, 1.0, 1.0},{0.0, 1.0, 1.0}
};

void quad(int a, int b, int c, int d)
{
    glBegin(GL_QUADS);
        glVertex3fv(vertices[a]);
        glVertex3fv(vertices[b]);
        glVertex3fv(vertices[c]);
        glVertex3fv(vertices[d]);
    glEnd();
}
void mydraw()
{
    glColor3f(1.0, 0.0, 0.0);
    glColor3fv(colors[0]);     quad(0, 3, 2, 1); // clr for each quad
    glColor3fv(colors[1]);     quad(2, 3, 7, 6);
    glColor3fv(colors[2]);     quad(0, 4, 7, 3);
    glColor3fv(colors[3]);     quad(1, 2, 6, 5);
    glColor3fv(colors[4]);     quad(4, 5, 6, 7);
    glColor3fv(colors[5]);     quad(0, 1, 5, 4);
}
void drawObject()
{
    glColor3f(0.7, 0.0, 0.50);
    //glutWireDodecahedron();
    glTranslated(2, 2,0);
  //glutSolidTorus(0.5, 1, 4, 20);
   glutWireTorus(0.5, 5, 20, 20);
    glColor3f(0.7, 0.7, 0);
   //glutWireSphere(2, 16, 16);
  glColor3f(0.0, 1.0, 1.0);
  glTranslatef(-2.0, 1.0, 0);
  //glutWireTorus(0.5, 1, 30, 30);
   //glutWireTeapot(2.0);
  //glScalef(3.5, 3.5, 3.50);
   //glutWireCube(2.0);
 //glutWireTetrahedron();

  //glutWireOctahedron();
    //glBegin();
    //glEnd();

}
void resize(int width, int height)
{
    double aspect;
    glViewport(0, 0, width, height);
    aspect = (double) width / (double) height;
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    cout << "aspect ratio" << aspect;
    if (aspect < 1.0)
    {
        glOrtho(-4., 4., -4./aspect, 4./aspect, 1., 100.);
    }
    else
    {
        glOrtho(-4.*aspect, 4.*aspect, -4., 4., 1., 100.);
    }
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(0., 0., 5., 0., 0., 0., 0., 1., 0.);

}

void display(void)
{
    glClearColor(0.0f, 0.0f, 0.0, 0.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    //mydraw(); // drawing cube
    drawObject(); // already existing predef objs
    glutSwapBuffers();
}


static void key(unsigned char key, int x, int y) // for key press
{
    switch (key)
    {
        case 27 :
        case 'q':
            exit(0);
            break;

        case '+':
            cout << "+" << "Pressed ";
            ez += 1.0;
            break;

        case '-':
            cout << "+" << "Pressed ";
            ez -= 1.0;
            break;
    }
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(ex, ey, ez,  0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
    glutPostRedisplay();

}


static void arrowKey(int key, int x, int y)
{
    cout << key << "pressed\n";
    switch(key)
    {
        case GLUT_KEY_LEFT:
            cout << "GLUT_KEY_LEFT" << "Pressed ";
            ex -= 1.0;
            break;

        case GLUT_KEY_RIGHT:
            cout << "GLUT_KEY_RIGHT" << "Pressed ";
            ex += 1.0;
            break;

        case GLUT_KEY_UP:
            cout << "GLUT_KEY_UP" << "Pressed ";
            ey -= 1.0;
            break;

       case GLUT_KEY_DOWN:
            cout << "GLUT_KEY_DOWN" << "Pressed ";
            ey += 1.0;
            break;

    }
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(ex, ey, ez,  0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
    glutPostRedisplay();
}

static void idle(void)
{
    glutPostRedisplay();
}


int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(640,480);
    glutInitWindowPosition(10,10);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH); // as 3D

    glutCreateWindow("3D Projection");

    glutReshapeFunc(resize);
    glutDisplayFunc(display);
    glutKeyboardFunc(key);
    glutSpecialFunc(arrowKey);
    //glutIdleFunc(idle);

    init();

    glutMainLoop();

    return EXIT_SUCCESS;
}





# C CURVE

from turtle import *
color('red', 'blue')
#begin_fill()
rule=['r','f','l','l','f','r']
prev=['r','f','l','l','f','r']
ans=[]
for iter in range(6):
    ans = []
    for i in prev:
        if(i=='f'):
            ans+=rule
        else:
            ans.append(i)
    prev = ans

print(ans)

for i in range(0,len(ans)):
    if(ans[i] == 'r'):
        right(45)
    elif(ans[i] == 'f'):
        forward(20)
    elif(ans[i] == 'l'):
        left(45)


#end_fill()
done()





# DRAGON

import turtle

def dragon_curve(turtle, order, length, direction):
    if order == 0:
        turtle.forward(length)
    else:
        dragon_curve(turtle, order - 1, length, 1)
        turtle.right(90 * direction)
        dragon_curve(turtle, order - 1, length, -1)

turtle.speed(0)
dragon_curve(turtle, 12, 5, 1)
turtle.done()





# MANDELBROT

import turtle
import math

def mandelbrot(z , c , n=20):
    if abs(z) > 10 ** 12:
        return float("nan")
    elif n > 0:
        return mandelbrot(z ** 2 + c, c, n - 1)
    else:
        return z ** 2 + c

# screen size (in pixels)
screenx, screeny = 800, 600

# complex plane limits
complexPlaneX, complexPlaneY = (-2.0, 2.0), (-1.0, 2.0)

# discretization step
step = 2

# turtle config
turtle.tracer(0, 0)
turtle.setup(screenx, screeny)

screen = turtle.Screen()
screen.bgcolor("red")
screen.title("Mandelbrot Fractal (discretization step = %d)" % (int(step)))
mTurtle = turtle.Turtle()
mTurtle.penup()
mTurtle.shape("square")

# px * pixelToX = x in complex plane coordinates
pixelToX, pixelToY = (complexPlaneX[1] - complexPlaneX[0])/screenx, (complexPlaneY[1] - complexPlaneY[0])/screeny

# plot
for px in range(-int(screenx/2), int(screenx/2), int(step)):
    for py in range(-int(screeny/2), int(screeny/2), int(step)):
        x, y = px * pixelToX, py * pixelToY
        m =  mandelbrot(0, x + 1j * y)
        if not math.isnan(m.real):
            color = [abs(math.sin(m.imag)) for i in range(3)]
            mTurtle.color(color)
            mTurtle.dot(2.4, color)
            mTurtle.goto(px, py)
    turtle.update()

turtle.mainloop()





# TERRAIN

import turtle
import random

# Set up the screen
screen = turtle.Screen()
screen.setup(width=800, height=600)
screen.bgcolor("skyblue")

# Set up the turtle
terrain_turtle = turtle.Turtle()
terrain_turtle.speed(0)  # Set the fastest drawing speed
terrain_turtle.penup()

# Function to draw terrain
def draw_terrain():
    terrain_turtle.goto(-400, -20)  # Starting point
    terrain_turtle.pendown()

    # Draw the terrain
    for _ in range(160):
        terrain_turtle.color("green")
        terrain_turtle.forward(5)  # Move forward
        terrain_turtle.setheading(random.choice([0, 45, -45]))  # Turn randomly
        terrain_turtle.forward(random.randint(1, 10))  # Move up or down randomly

# Call the function to draw terrain
draw_terrain()

# Hide the turtle
terrain_turtle.hideturtle()

# Keep the window open
screen.mainloop()

6.JULIA SET

import turtle
import math

def julia(z, c, n=20):
    if abs(z) > 10 ** 12:
        return float("nan")
    elif n > 0:
        return julia(z ** 2 + c, c, n - 1)
    else:
        return z ** 2 + c

# Screen size (in pixels)
screenx, screeny = 800, 600

# Complex plane limits
complexPlaneX, complexPlaneY = (-2.0, 2.0), (-2.0, 2.0)

# Discretization step
step = 2

# Turtle configuration
turtle.tracer(0, 0)
turtle.setup(screenx, screeny)

screen = turtle.Screen()
screen.bgcolor("black")
screen.title("Julia Fractal (discretization step = %d)" % (int(step)))
jTurtle = turtle.Turtle()
jTurtle.penup()
jTurtle.shape("square")

# px * pixelToX = x in complex plane coordinates
pixelToX, pixelToY = (complexPlaneX[1] - complexPlaneX[0]) / screenx, (complexPlaneY[1] - complexPlaneY[0]) / screeny

# Julia set constant (change as needed)
c = complex(-0.7, 0.27015)

# Plot
for px in range(-int(screenx/2), int(screenx/2), int(step)):
    for py in range(-int(screeny/2), int(screeny/2), int(step)):
        x, y = px * pixelToX, py * pixelToY
        m = julia(0, x + 1j * y + c)
        if not math.isnan(m.real):
            color = [abs(math.sin(m.imag)) for i in range(3)]
            jTurtle.color(color)
            jTurtle.dot(2.4, color)
            jTurtle.goto(px, py)
    turtle.update()

turtle.mainloop()


#########################################################################################

7.SNOWFLAKE 

# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 18:34:44 2024

@author: maana
"""

import turtle

def koch_snowflake(t,length,levels):
    if levels == 0:
        t.forward(length)
        return
    else:
        length = length/3

        koch_snowflake(t, length, levels-1)
        t.left(60)
        koch_snowflake(t, length, levels-1)

        t.right(120)
        koch_snowflake(t, length, levels-1)

        t.left(60)
        koch_snowflake(t, length, levels-1)





t = turtle.Turtle()
t.hideturtle()
t.color('black')

for i in range(3):
    koch_snowflake(t, 200, 4)
    t.right(120)


t.mainloop()
